package Controller;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import Repositories.ATM_Plan;

public class ATM implements ATM_Plan {

	// Many of these vars could have been taken out.
	// User_ID could have been global
	// Console App: User_ID was assigned to the MySQL int when logged in

	int User_ID = 0;
	static boolean loggedIn = false;
	String returnString = "";
	static final String DB_URL = "jdbc:mysql://127.0.0.1/cfmatm";
	static final String USER = "root";
	static final String PASS = "root";
	static Connection connection;

	// Login worked in console app, but not through the GUI
	@Override
	public void login(long cc, int pin) {
		// initializing local variable
		long ccLog = 0;
		int pinLog = 0;
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			// Make the connection to the DB server and DB by passing in server credentials
			connection = DriverManager.getConnection(DB_URL, USER, PASS);

		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}

		try {
			// Write the SQL with ? as placeholders for user or code variables
			String sql = "SELECT User_ID, CC_number, Pin FROM User WHERE CC_number = ? AND Pin = ?";
			// Create a PreparedStatement object so it look for the ? placeholders
			PreparedStatement stmt = connection.prepareStatement(sql);

			// Replace the ? with the correct number and type of variable (e.g. String)
			stmt.setLong(1, cc);
			stmt.setInt(2, pin);

			// Execute the query based on the PreparedStatement object, do not pass the sql
			// variable
			ResultSet results = stmt.executeQuery();
			// Loop through the results of the query
			while (results.next()) {
				results.getInt("User_ID");
				results.getInt("Pin");
				// If data entry in GUI matches the CC and Pin found in the DB LoggedIn = True
				if (cc == (results.getLong("CC_number")) && pin == (results.getInt("Pin"))) {
					// Using this, User_ID has been global scope
					User_ID = results.getInt("User_ID");
					ccLog = (results.getLong("CC_number"));
					pinLog = (results.getInt("Pin"));
					loggedIn = true;
					break;
				}
			}
			// Credentials are valid so return TRUE
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	// Since you have seen this last, I removed parameters that did nothing
	// and commented out code was replaced with boolean if else
	public static boolean loggedIn() {
		if (loggedIn == true) {
			return true;
		} else {
			return false;
		}
	}

	@Override
	public void createAccount() {
		// Creates account in the mysql DB
		String sql = "INSERT INTO Bank_account (User_ID, Account_balance) VALUES (?,?)";
		try {
			PreparedStatement stmt = connection.prepareStatement(sql);
			stmt.setInt(1, User_ID);
			stmt.setLong(2, 0);
			stmt.execute();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	@Override
	public String readAccountInfo() {
		// An arraylist would suit this function best but I could not figure out how to
		// return one for the GUI.
		String sql1 = "SELECT User_ID, Account_ID, Account_balance FROM Bank_account where User_ID = ?";
		try {
			PreparedStatement stmt = connection.prepareStatement(sql1);
			stmt.setInt(1, User_ID);
			stmt.execute();
			ResultSet results = stmt.executeQuery();

			while (results.next()) {
				returnString = returnString + "|| User ID #" + results.getInt("User_ID");
				returnString = returnString + ", Account ID #" + results.getInt("Account_ID");
				returnString = returnString + ", $" + results.getLong("Account_balance") + "|| ";
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		// When I tried to return an ArrayList of info, it would not be accepted in
		// the GUI when I called it inside setText for the MessageLabel.
		// I previously used encapsulation in the console app with an object of account
		// that had attributes User_ID, Account_ID, and Account_Balance.
		return returnString;
	}

	@Override
	public String updatePin(int newPin) {
		try {
			String sql = "SELECT User_ID, Pin FROM User where User_ID = ?";
			PreparedStatement stmt = connection.prepareStatement(sql);
			stmt.setInt(User_ID, 1);
			ResultSet results = stmt.executeQuery();

			while (results.next()) {
				// Update the table in mysql
				sql = "UPDATE User SET Pin = ? WHERE User_ID = ?";
				stmt = connection.prepareStatement(sql);
				stmt.setInt(1, newPin);
				stmt.setInt(2, User_ID);
				stmt.execute();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return returnString = "Pin has been changed to: " + newPin;
	}

	@Override
	public String deleteAnAccount(int deleteID, int transID) {
		long amountTrans = 0;
		// Delete account transfers and updates balances, creates transactions, and
		// deletes an account

		// Get the amount into variable amountTrans
		String sql2 = "SELECT User_ID, Account_ID, Account_balance FROM Bank_account where Account_ID = ?";
		try {
			PreparedStatement stmt = connection.prepareStatement(sql2);
			stmt.setInt(1, deleteID);
			stmt.execute();
			ResultSet results = stmt.executeQuery();
			amountTrans = results.getLong("Account_balance");

		} catch (SQLException e) {
			e.printStackTrace();
		}

		// Create transaction for the account it is transferring to before account

		String sql1 = "INSERT INTO Transaction (User_ID, Account_ID, sign, Amount_trans) VALUES (?,?,?,?)";
		try {
			PreparedStatement stmt = connection.prepareStatement(sql1);
			stmt.setInt(1, User_ID);
			stmt.setInt(2, transID);
			stmt.setString(3, "A");
			stmt.setLong(4, amountTrans);
			stmt.execute();
			// updating accounts post transfer (one to be deleted will have $) balance)
			updateAccount(transID, "A", amountTrans);
			updateAccount(deleteID, "M", amountTrans);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		// deletion
		try {
			String sql = "SELECT User_ID, Account_ID, FROM Bank_account where Account_ID = ?";
			PreparedStatement stmt = connection.prepareStatement(sql);
			ResultSet results = stmt.executeQuery();
			stmt.setInt(deleteID, 1);
			// DELETE a record from the Banks_accnt table
			sql = "DELETE FROM Bank_account WHERE Account_ID = ?";
			stmt = connection.prepareStatement(sql);
			stmt.setInt(1, deleteID);
			stmt.execute();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		returnString = "Bank Account #" + deleteID + " is deleted and the balance was transfered to Account #"
				+ transID;
		return returnString;
	}

	@Override
	public void updateAccount(int Account_ID, String sign, long amountTrans) {
		long balance = 0;
		// adds or subtracts the transaction amount depending on the sign
		if (sign.contentEquals("a") || sign.contentEquals("A")) {
			try {// Update balance in bank account transfered to
				String sql = "SELECT User_ID, Account_ID, Account_balance FROM Bank_account WHERE Account_ID = ?";
				PreparedStatement stmt = connection.prepareStatement(sql);
				stmt.setInt(Account_ID, 1);
				ResultSet results = stmt.executeQuery();
				// the new balance is + the transfer
				balance = results.getLong("Account_balance") + amountTrans;
				while (results.next()) {
					// Update the table
					sql = "UPDATE Bank_account SET Account_balance = ? WHERE Account_ID = ?";
					stmt = connection.prepareStatement(sql);
					stmt.setLong(1, balance);
					stmt.setInt(2, Account_ID);
					stmt.execute();
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}

		if (sign.contentEquals("M") || sign.contentEquals("m")) {
			try {// Update balance in bank account transfered from
				String sql = "SELECT User_ID, Account_ID, Account_balance FROM Bank_account WHERE Account_ID = ?";
				PreparedStatement stmt = connection.prepareStatement(sql);
				stmt.setInt(Account_ID, 1);
				ResultSet results = stmt.executeQuery();
				// the new balance is + the transfer
				balance = results.getInt("Account_balance") - amountTrans;

				while (results.next()) {
					// Update the table
					sql = "UPDATE Bank_account SET Account_balance = ? WHERE Account_ID = ?";
					stmt = connection.prepareStatement(sql);
					stmt.setLong(1, balance);
					stmt.setInt(2, Account_ID);
					stmt.execute();
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}

	}

	@Override
	public String search(String s, int Account_ID) {

		// search for m (minuses) or a (additions) to the account
		String sql = "SELECT Transaction_ID, User_ID, Account_ID, sign, Amount_trans FROM Transaction where Account_ID = ? sign = ? order by Transaction_ID";
		try {
			PreparedStatement stmt = connection.prepareStatement(sql);
			stmt.setInt(1, Account_ID);
			stmt.setString(2, s);
			ResultSet results = stmt.executeQuery();
			while (results.next()) {
				returnString = returnString + " " + results.getInt("Transaction_ID");
				returnString = returnString + " " + results.getInt("User_ID,");
				returnString = returnString + " " + results.getInt("Account_ID");
				returnString = returnString + " " + results.getString("sign");
				returnString = returnString + " " + results.getString("Amount_trans") + "\n";
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return returnString;
	}

	@Override
	public String sort(int x, int Account_ID) { // Sort transactions by: 1) Amount 2) Add (a) or Minus (m)
		// Sort by amount
		if (x == 1) {
			String sql = "SELECT Transaction_ID, User_ID, Account_ID, sign, Amount_trans FROM Transaction where Account_ID = ? order by Amount_trans";
			try {
				PreparedStatement stmt = connection.prepareStatement(sql);
				stmt.setInt(1, Account_ID);
				ResultSet results = stmt.executeQuery();
				while (results.next()) {
					returnString = returnString + results.getInt("Transaction_ID");
					returnString = returnString + "\t" + results.getInt("User_ID,");
					returnString = returnString + "\t" + results.getInt("Account_ID");
					returnString = returnString + "\t" + results.getString("sign");
					returnString = returnString + "\t" + results.getString("Amount_trans") + "\n";
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		// Sort by sign-- m (minuses) or a (additions)
		if (x == 2) {
			String sql = "SELECT Transaction_ID, User_ID, Account_ID, sign, Amount_trans FROM Transaction where Account_ID = ? order by sign";
			try {
				PreparedStatement stmt = connection.prepareStatement(sql);
				stmt.setInt(1, Account_ID);
				ResultSet results = stmt.executeQuery();
				while (results.next()) {
					returnString = returnString + results.getInt("Transaction_ID");
					returnString = returnString + "\t" + results.getInt("User_ID,");
					returnString = returnString + "\t" + results.getInt("Account_ID");
					returnString = returnString + "\t" + results.getString("sign");
					returnString = returnString + "\t" + results.getString("Amount_trans") + "\n";
				}

			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return returnString;
	}

}
