package View;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.UIManager;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.UnsupportedLookAndFeelException;

import Controller.ATM;

public class Login_GUI extends JFrame implements ActionListener{
	//Start Menu attributes -- 
	// menubar 
	static JMenuBar mb; 
	// JMenu 
	static JMenu x; 
	// Menu items 
	static JMenuItem C, R, U, D, Search, Sort; 
	// create a frame 
	static JFrame f; 
	// The label 
	static JLabel l; 
	 //End menu attributes --
	 
	
	
	static ATM atm = new ATM();
	// add this field
	// Initializing JTextFields
	private static final long serialVersionUID = 1L;

	// For the login
	private JTextField CCField = new JTextField();
	private JTextField PinField = new JTextField();

	private JLabel messageLabel = new JLabel("Hi! Please enter your information.");;

	public Login_GUI() {
		initComponents();
	}

	private void initComponents() {
		// Throwing exception
		try {
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		} catch (ClassNotFoundException | InstantiationException | IllegalAccessException
				| UnsupportedLookAndFeelException e) {
			System.out.println(e);

		}

		setTitle("ATM");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setLocationByPlatform(true);

		Dimension dim = new Dimension(150, 20);

		// setting size for login
		CCField.setPreferredSize(dim);
		PinField.setPreferredSize(dim);
		CCField.setMinimumSize(dim);
		PinField.setMinimumSize(dim);


		JButton registerButton = new JButton("Register");
		JButton exitButton = new JButton("Exit");

		// need to open the function
		// Sending anonymous object to the addActionListner function
		registerButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				// Call to method "clicked"
				registerButtonClicked();
			}

		});

		// Sending anonymous object to the addActionListner function
		exitButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				exitButtonClicked();
			}
		});

		// button panel of register and exit
		JPanel buttonPanel = new JPanel();
		buttonPanel.setLayout(new FlowLayout(FlowLayout.RIGHT));
		buttonPanel.add(registerButton);
		buttonPanel.add(exitButton);

		// main panel that creates JLabels that go in order next to the text fields

		JPanel panel = new JPanel();
		panel.setLayout(new GridBagLayout());
		panel.add(new JLabel("Credit Card Number:"), getConstraints(0, 0));
		panel.add(CCField, getConstraints(1, 0));
		panel.add(new JLabel("Pin:"), getConstraints(0, 1));
		panel.add(PinField, getConstraints(1, 1));

		// add label as last row of main panel
		GridBagConstraints c = getConstraints(0, 6);
		c.gridwidth = 22;
		panel.add(messageLabel, c);
		add(panel, BorderLayout.CENTER);
		add(buttonPanel, BorderLayout.SOUTH);

		// setting dimensions for the full pane.
		setSize(new Dimension(420, 300));
	}

	// helper method for getting a GridBagConstraints object

	private GridBagConstraints getConstraints(int x, int y) {
		GridBagConstraints c = new GridBagConstraints();
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(5, 5, 0, 5);
		c.gridx = x;
		c.gridy = y;
		return c;

	}

	public void registerButtonClicked() {
		long logcc = Long.valueOf(CCField.getText());
		int logpin = Integer.valueOf(PinField.getText());
		
		if (CCField.getText().isEmpty() || PinField.getText().isEmpty()) {
			messageLabel.setText("Please enter your card number and pin");
		}
		if(ATM.loggedIn(logcc, logpin) == true) {
			messageLabel.setText("Logged in!");
			showMenu();
		}
		else {
			messageLabel.setText("I don't recognize you!");
			//Not registering the login even when valid. My second project without the GUI is able to login correctly.
			showMenu();
		}
		

	}


	// If the user decides to changed his mind, he can press exit and escape the
	// potentially frightful array of colors.
	private void exitButtonClicked() {
		System.exit(0);
	}

	// The main function where everything in the JFrame is called on to be executed,
	// and seen
	public static void createAndShowGUI() {
		JFrame frame = new Login_GUI();
		frame.setVisible(true);

	}

	public static void showMenu() {
			// create an object of the class 
			Login_GUI menu = new Login_GUI(); 

			// create a frame 
			f = new JFrame("Menu demo"); 

			// create a label 
			l = new JLabel(""); 

			// create a menubar 
			mb = new JMenuBar(); 

			// create a menu 
			x = new JMenu("ATM Menu"); 

			// create menuitems 
			C = new JMenuItem("Create Account"); 
			R = new JMenuItem("Read Account Info"); 
			U = new JMenuItem("Update Pin"); 
			D = new JMenuItem("Delete Account"); 
			Search = new JMenuItem("Search"); 
			Sort = new JMenuItem("Sort"); 

			// add ActionListener to menuItems 
			C.addActionListener(menu); 
			R.addActionListener(menu); 
			U.addActionListener(menu); 
			D.addActionListener(menu); 
			Search.addActionListener(menu); 
			Sort.addActionListener(menu); 

			// add menu items to menu 
			x.add(C); 
			x.add(R); 
			x.add(U); 
			x.add(D); 
			x.add(Search); 
			x.add(Sort); 


			// add menu to menu bar 
			mb.add(x); 

			// add menubar to frame 
			f.setJMenuBar(mb); 

			// add label 
			f.add(l); 

			// set the size of the frame 
			f.setSize(500, 500); 
			
			f.setVisible(true);
		
	}
	@Override
	public void actionPerformed(ActionEvent e) {
		String s = e.getActionCommand(); 
		if(s.equals(C)) {			
			//Get userID
			Create.createAndShowGUI();
			l.setText("New Account Created!"); 
			
		}
		if(s.equals(R)) {
			
			
		}
		if(s.equals(U)) {
			UpdatePin.createAndShowGUI();
		}
		if(s.equals(D)) {
			Delete.createAndShowGUI();
		}
		if(s.equals(Search)) {
			
		}
		if(s.equals(Sort)) {
		
		}
		// set the label to the menuItem that is selected 
		l.setText(s + " selected"); 
	}

}
